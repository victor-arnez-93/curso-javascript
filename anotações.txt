comentários em JS

// para comentar numa mesma linha
/* */ para comentar em mais de uma linha

= -> recebe

null = nulo, não recebe nada

var = variável, ex(var n1, varn2, varn3)

nome de cada variável é chamado de identificador
IDENTIFICADORES
Podem começar com uma letra, $ ou _
Não podem começar com números
É possível utilizar letras e números
É possível usar acentos e símbolos
Não podem conter espaços
Não podem ser palavras reservadas (ex function, var, alert)
Maiúsculas e minúsculas fazem diferença
Tente escolher nomes coerentes para as variáveis
Variáveis servem para guardar dados

DATA TYPES
5 18 -12 = number (Infinity, NaN)
"Google", 'Javascript', `Maria` ou número de cpf por ex. = string
True, False = boolean
Null
Undefined
Object
Array
Function

comando 'typeof'

ANOTAÇÕES AULA 06 EXERCICIO 03

Converter string em número

Number.parseInt(n)
Number.parseFloat(n) -> número com vírgula
Number(n) -> modo atual em que ele se vira para decidir qual o tipo do valor

<script>
        var n1 = Number(window.prompt('Digite um número: ')) // String por isso precisa converter
        var n2 = Number(window.prompt('Digite outro número: ')) // String por isso precisa converter
        var s = n1 + n2
        window.alert('A soma dos valores é ' + s) // concatenação
        // (number + number) para adição
        // (string + string) para concatenação  
    </script>

Converter número em string

String(n)
n.toString()

FORMATANDO STRINGS
s.lenght -> quantos caracteres a string tem
s.toUpperCase() -> tudo para Maiúsculas
so.toLowerCase() -> tudo para minúsculas

FORMATANDO NÚMEROS
n1.toFixed(2)
n1.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'}) -> mostrar valores em dinheiro



EXEMPLO FEITO NO NODE

> nome = 'Victor'
'Victor'
> idade = 29
29
> nota = 5.5
5.5
> nome 
'Victor'
> idade
29
> nota
5.5
> 'O aluno ' + nome + ' com ' + idade + ' anos tirou a nota ' + nota
'O aluno Victor com 29 anos tirou a nota 5.5'
> `O aluno ${nome} com ${idade} anos tirou a nota ${nota}`
'O aluno Victor com 29 anos tirou a nota 5.5'

OPERADORES

aritméticos
atribuição
relacionais
lógicos
ternário

Aritméticos
5 + 2 -> 7
5 - 2 -> 3
5 * 2 -> 10 (multiplicação)
5 / 2 -> 2.5
5 % 2 -> 1 (resto da divisão inteira)
5 ** 2 -> 25 (ao quadrado)

5 + 3 / 2 = 6.5 , porque ele faz primeiro a divisão depois a soma
(5 + 3) / 2 = 4 porque entre parênteses ele faz na ordem correta


PRECENDÊNCIA

() -> parênteses
**  -> potências
* / % -> multiplicação, divisão, resto da divisão ( esses tem a mesma ordem você define pela posição)
+ - -> adição e subtração

SIMPLIFICANDO

n = n + 4   -> n += 4
n = n - 5   -> n -= 5
n = n * 4   -> n *= 4
n = n / 2   -> n /= 2
n = n ** 2  -> n **= 2
n = n % 5   -> n %= 5

OPERADORES RELACIONAIS

>   -> maior
<   -> menor
>=  -> maior ou igual
<=  -> menor ou igual
==  -> igual
!=  -> diferente
!== -> desigual restrito
=== -> idêntico

5 > 2 = true
7 < 4 = false
8 >= 8 = true
9 <= 7 = false
5 == 5 = true
4 != 4 = false
5 == '5' = true
5 === '5' = false

var a = 8
var b = 15

a > b 
false
a < b
true

OPERADORES LÓGICOS

! -> negação
&& -> conjunção
|| -> disjunção

-- Quando eu tenho operadores aritméticos, relacionais e lógicos na mesma expressão, primeiro ele faz todos os aritméticos, depois os relacionais e por último os lógicos.--

-- Se eu tiver um E, um OU e um NÃO, a ordem de execução é sempre essa primeiro NÃO, depois E, depois OU.--


ORDEM PRECEDÊNCIA

()**/ -> aritméticos
><>= -> relacionais, não tem ordem de precedência e sim por leitura
!         |
&&        |---> lógicos, primeiro NÃO, depois E, e por último OU.  
||        |


OPERADOR TERNÁRIO

? -> 
: ->

exemplo:
teste?true:false
média>=7.0?"APROVADO":"REPROVADO"


DOM
Document Object Model
É basicamente um conjunto de objetos dentro do seu navegador, que vai dar acesso aos componentes internos do seu website.

                                              Árvore DOM 

                                                window
                            location           document         history
                                                   | 
                                                 html

                                        head            body
                                          |              |                                       
                                    meta    title        |
                                                         |
                                                         |
                                                    h1  p   p   div
                                                            |
                                                            |
                                                          strong
O que está acima é parent e abaixo é child, exemplo nesse caso html é child de document e vice versa.

SELECIONANDO
por Marca -> getElementsByTagName()
por ID -> getElementById()
por Nome -> getElementsByName()
por Classe -> getElementsByClassName()
por Seletor -> querySelector() ou querySelectorAll()

FUNÇÕES
function ação(param) {

}

(param) = parâmetro

CONDIÇÕES
Estrutura Básica

if (condição) {
    true
} else {
    false
}

IF = SE
ELSE = SE NÃO

REPETIÇÕES

-- Estrutura de repetição com teste lógico no início (while)

while (condição) {

}

-- Estrutura de repetição com teste lógico no final (do while)

do {
    
} while (condição)

EXEMPLOS DA PRIMEIRA 
function comerPizza() {
  while (temFatia()) {
    comerFatia()
  }
}

var c = 1
while (c <= 10) {
    console.log(`Passo ${c}`)
    c++ // c = c + 1
}

EXEMPLO DA SEGUNDA
var c = 1
do {
    console.log(`Passo ${c}`)
    c++ // c = c + 1
} while (c <= 10)

REPETIÇÕES COM FOR

for (inicio ; teste; incr) {

}

EXEMPLO (c++ significa c+1)

var c=1
while (c<=10){

  c++               
}

COM FOR

for (c=1;c<=10;c++) {

}

VARIÁVEIS 
Variáveis simples só conseguem armazenar um valor por vez.
Variáveis compostas devem ser capazes de armazenar vários valores em uma mesma estrutura.

Um array, ou vetor, ou variável composta, é uma variável que tem varios elementos, cada elemento tem seu valor e uma chave de identificação.

vaga a = [a1, a2, a3]

array,vetor
índice, chave
elemento
conteúdo,valor

var num = [5,8,4]
num[3]=6 -> ele cria um novo valor 
num.push(7) -> acrescente valores, nesse caso na chave 4 e o valor 7
num.lenght -> pega o cumprimento, quantas casas/elementos tem no array
num.sort() -> coloca os valores em ordem crescente
num.indexOf() -> buscar um valor

for (var pos=0;pos<num.lenght;pos++) {
  console.log(num[pos])
}

OUTRA FORMA - SIMPLIFICADA

for (var pos in num){
  console.log(num[pos])
}

Var também pode ser let.
Essa sintaxe do for só funciona para arrays e objetos.
